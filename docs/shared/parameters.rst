
.. start_parameter_bqm

Ocean software's :class:`dimod.binary.BinaryQuadraticModel` (BQM) contains
linear and quadratic biases for problems formulated as
:ref:`binary quadratic models <concept_models_bqm>` as well as additional
information such as variable labels and offset.

.. end_parameter_bqm


.. start_parameter_h

For :ref:`Ising <concept_models_ising>` problems, the :math:`h` values are the
linear coefficients (biases). A problem definition comprises both
:ref:`parameter_qpu_h` and :ref:`parameter_qpu_j` values.

Because the quantum annealing process minimizes the energy function of the
Hamiltonian, and :math:`h_i` is the coefficient of variable :math:`i`, returned
states of the problem's variables tend toward the opposite sign of their biases;
for example, if you bias the qubits representing variable :math:`v_i` with
:math:`h_i` values of :math:`-1`, variable :math:`v_i` is more likely to have a
final state of :math:`+1` in the solution.

For :ref:`QUBO <concept_models_qubo>` problems, use :ref:`parameter_qpu_q`
instead of :math:`h` and :math:`J`; see the
:ref:`qpu_qubo_ising_transformations` section for information on converting
between the formulations.

If you are submitting directly through SAPI's REST API, see the
:ref:`leap_sapi_rest` section for more information.

Default is zero linear biases.

.. end_parameter_h


.. start_parameter_j

For :ref:`Ising <concept_models_ising>` problems, the :math:`J` values are the
quadratic coefficients. The larger the absolute value of :math:`J`, the stronger
the coupling between pairs of variables (and qubits on QPU solvers). An Ising
problem definition comprises both :ref:`parameter_qpu_h` and
:ref:`parameter_qpu_j` values.

Because the quantum annealing process minimizes the energy function of the
Hamiltonian, and this parameter sets the strength of the couplers between
qubits, the following obtains:

-   :math:`\textbf {J < 0}`: Ferromagnetic coupling; coupled qubits tend to be
    in the same state, :math:`(1,1)` or :math:`(-1,-1)`.
-   :math:`\textbf {J > 0}`: Antiferromagnetic coupling; coupled qubits tend to
    be in opposite states, :math:`(-1,1)` or :math:`(1,-1)`.
-   :math:`\textbf {J = 0}`: No coupling; qubit states do not affect each other.

For :ref:`QUBO <concept_models_qubo>` problems, use :ref:`parameter_qpu_q`
instead of :math:`h` and :math:`J`; see the
:ref:`qpu_qubo_ising_transformations` section for information on converting
between the formulations.

If you are submitting directly through SAPI's REST API, see the
:ref:`leap_sapi_rest` section for more information.

Default is zero quadratic biases.

.. end_parameter_j


.. start_parameter_label

Problem label you can optionally tag submissions with.
You can set as a label a non-empty string of up to 1024 Windows-1252
characters that has meaning to you or is generated by your application, which
can help you identify your problem submission. You can see this label on the
`Leap <https://cloud.dwavesys.com/leap/>`_ service's dashboard and in solutions
returned from SAPI.

.. end_parameter_label


.. start_parameter_q

A quadratic unconstrained binary optimization
(:ref:`QUBO <concept_models_qubo>`) problem is defined using an upper-triangular
matrix, :math:`\rm \textbf{Q}`, which is an :math:`N \times N` matrix of real
coefficients, and :math:`\textbf{x}`, a vector of binary variables. The diagonal
entries of :math:`\rm \textbf{Q}` are the linear coefficients (analogous to
:math:`h`, in Ising problems). The nonzero off-diagonal terms are the quadratic
coefficients that define the strength of the coupling between variables
(analogous to :math:`J`, in Ising problems).

Input may be full or sparse. Both upper- and lower-triangular values can be
used; (:math:`i`, :math:`j`) and (:math:`j`, :math:`i`) entries are added
together.

If you are submitting directly through SAPI's REST API, see the
:ref:`leap_sapi_rest` section for more information.

Default is zero linear and quadratic biases.

.. end_parameter_q


.. start_parameter_time_limit

Specifies the maximum runtime, in seconds, the solver is allowed to work on the
given problem. Can be a float or integer.

Default value is problem dependent.

.. end_parameter_time_limit


.. start_parameter_delay_after_read

.. note::
    Usage of the
    :ref:`parameter_qpu_reduce_intersample_correlation` and
    :ref:`parameter_qpu_readout_thermalization` parameters is not recommended
    for |adv2| systems; see the :ref:`qpu_errors_spinbath_polarization` section
    for details.

.. end_parameter_delay_after_read